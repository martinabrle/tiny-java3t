name: cicd-aks-infra

on:
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - 'api/**'
  workflow_dispatch:
    inputs:
      run_cleanup:
        type: boolean
        description: Delete all existing resources first

jobs:
  cleanup_if_requested:
    runs-on: ubuntu-latest
    environment: AKS
    steps:
      - name: Azure login
        if: github.event.inputs.run_cleanup == 'true'
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set default Azure subscription
        if: github.event.inputs.run_cleanup == 'true'
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Remove the resource group
        if: github.event.inputs.run_cleanup == 'true'
        run: |
          RG_EXISTS=$(az group exists --name ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          if [[RG_EXISTS -eq true]]; then
             echo "Deleting the Todo App app resource group"
             az group delete --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} --yes
          fi

  deploy_log_analytics_if_needed:
    # Having this as a separte Job, as there are many situations where Log Analytics
    # workspace would be outside of the current subscription
    needs: [cleanup_if_requested]
    runs-on: ubuntu-latest
    environment: AKS
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set default Azure subscription
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Check the resource group exists
        id: logs_rg_exists
        run: |
          LOGS_RG_EXISTS=$(az group exists --name ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          echo "::set-output name=LOGS_RG_EXISTS::${LOGS_RG_EXISTS}"

      - name: Create Logs Workspace Azure resource group
        if: steps.logs_rg_exists.outputs.LOGS_RG_EXISTS == 'false'
        run: |
          az deployment sub create \
           --location ${{secrets.AZURE_LOCATION}} \
           --template-file ./templates/components/rg.bicep \
           --parameters name=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} location=${{secrets.AZURE_LOCATION}} resourceTags="${{secrets.AZURE_RESOURCE_TAGS}}"

      - name: Deploy Log Workspace
        if: steps.logs_rg_exists.outputs.LOGS_RG_EXISTS == 'false'
        run: |
          az deployment group create --resource-group ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} --template-file ./templates/components/logs.bicep \
                        --parameters location=${{secrets.AZURE_LOCATION}}  \
                                     logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}

  deploy_infra:
    needs: [deploy_log_analytics_if_needed]
    runs-on: ubuntu-latest
    environment: AKS
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set default Azure subscription
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Purge deleted KV if found
        run: |
          kvDeletedQuery="[?name == '${{secrets.AZURE_KEY_VAULT_NAME}}'].id"
          kvDeletedExists=`az keyvault list-deleted --query "$kvDeletedQuery" -o tsv`
          if [[ ! -z "$kvDeletedExists" ]]; then
            echo "Deleted KeyVault exists, purging it and waiting for 10 mins"
            az keyvault purge -l ${{secrets.AZURE_LOCATION}} -n ${{secrets.AZURE_KEY_VAULT_NAME}}
          fi
      
      - name: Create Azure resource groups
        run: |
          az deployment sub create \
           --location ${{secrets.AZURE_LOCATION}} \
           --template-file ./templates/components/rg.bicep \
           --parameters name=${{secrets.AZURE_RESOURCE_GROUP}} location=${{secrets.AZURE_LOCATION}} resourceTags="${{secrets.AZURE_RESOURCE_TAGS}}"

      - name: Initialize deployment variables
        id: vars
        run: |
          clientIP=`dig +short myip.opendns.com @resolver1.opendns.com.`
          echo "::set-output name=DEPLOYMENT_CLIENT_IP::${clientIP}"
          echo "Client IP: $clientIP"

          createDB=false
          
          dbAdminName=`az postgres server list --query "[?fullyQualifiedDomainName == '${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com'].administratorLogin" -o tsv`
          if [[ -z "$dbAdminName" ]]; then
            echo "This is a new deployment, generating a new admin name"
            dbAdminName="a`openssl rand -hex 5`"
            createDB=true
          fi

          echo "Admin name: $dbAdminName"
          echo "Admin password: $dbAdminPassword"
          
          dbAdminPassword="`openssl rand -hex 25`#@"
          echo "::add-mask::$dbAdminPassword"
          echo "::set-output name=DB_ADMIN_PASSWORD::${dbAdminPassword}"
          
          echo "::set-output name=DB_ADMIN_NAME::${dbAdminName}"
          echo "::set-output name=DB_NOT_INITIALIZED::${createDB}"
          echo "Create DB: $createDB"

          dbAppUserName=`echo "${{secrets.AZURE_API_APP_NAME}}" | tr '-' '_'`;
          echo "::set-output name=DB_APP_USER_NAME::${dbAppUserName}"
          echo "App user name: $dbAppUserName"

          dbAppUserPassword="`openssl rand -hex 25`#@"
          echo "::add-mask::$dbAppUserPassword"
          echo "::set-output name=DB_APP_USER_PASSWORD::${dbAppUserPassword}"
          
          dbaGroupId=`az ad group show --group "${{secrets.AZURE_DBA_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "DBA Group Id: $dbaGroupId"
          echo "::set-output name=AZURE_DBA_GROUP_ID::${dbaGroupId}"
          
          aksAdminGroupId=`az ad group show --group "${{secrets.AZURE_AKS_ADMIN_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "AKS Admin Group Id: $aksAdminGroupId"
          echo "::set-output name=AZURE_AKS_ADMIN_GROUP_ID::${aksAdminGroupId}"
          
          aksName=`az aks list -g ${{secrets.AZURE_RESOURCE_GROUP}} --query "[?name=='${{secrets.AZURE_AKS_NAME}}'].name" -o tsv"`
          if [[ -z "${aksName}" ]]; then
            echo "This is an initial  deployment, no AKS cluster exists yet"
            echo "::set-output name=FIRST_DEPLOYMENT::true"
          else
            echo "::set-output name=FIRST_DEPLOYMENT::false"
          fi

      - name: Initial deployment to keep SystemAssignedIdentity fairies happy
        id: initial_deployment
        if: (steps.vars.outputs.FIRST_DEPLOYMENT == 'true')
        run: |
          echo "Deploying with the following parameters:"
          echo "Log analytics workspace RG: '${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}}'"
          echo "Log analytics workspace name: '${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}'"
          echo "AKS Cluster name: ${{secrets.AZURE_AKS_NAME}}"
          echo "Admin group ID: ${{steps.vars.outputs.AZURE_AKS_ADMIN_GROUP_ID}}"

          az deployment group create \
              --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} \
              --template-file ./templates/aks-mi-init.bicep \
              --parameters location=${{secrets.AZURE_LOCATION}}  \
                           logAnalyticsWorkspaceRG=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} \
                           logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}} \
                           aksClusterName=${{secrets.AZURE_AKS_NAME}} \
                           aksAdminGroupObjectId="${{steps.vars.outputs.AZURE_AKS_ADMIN_GROUP_ID}}" \
                           nodeResoureGroup=${{secrets.AZURE_AKS_NODE_RESOURCE_GROUP}}
      
      # - name: debug
      #   run: |
      #        echo "${{secrets.AZURE_RESOURCE_GROUP}}" >./tmp.txt
             
      #        echo "AZURE_LOCATION: ${{secrets.AZURE_LOCATION}}" >>./tmp.txt
      #        echo "AZURE_LOG_ANALYTICS_WRKSPC_NAME: ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}" >>./tmp.txt
      #        echo "AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP: ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}}" >>./tmp.txt
      #        echo "AZURE_KEY_VAULT_NAME: ${{secrets.AZURE_KEY_VAULT_NAME}}" >>./tmp.txt
      #        echo "AZURE_APP_INSIGHTS_NAME: ${{secrets.AZURE_APP_INSIGHTS_NAME}}" >>./tmp.txt
      #        echo "AZURE_DB_SERVER_NAME: ${{secrets.AZURE_DB_SERVER_NAME}}" >>./tmp.txt
      #        echo "AZURE_DB_NAME: ${{secrets.AZURE_DB_NAME}}" >>./tmp.txt
      #        echo "DB_ADMIN_NAME: ${{steps.vars.outputs.DB_ADMIN_NAME}}" >>./tmp.txt
      #        echo "DB_ADMIN_PASSWORD: ${{steps.vars.outputs.DB_ADMIN_PASSWORD}}" >>./tmp.txt
      #        echo "DB_APP_USER_NAME@AZURE_DB_SERVER_NAME: ${{steps.vars.outputs.DB_APP_USER_NAME}}@${{secrets.AZURE_DB_SERVER_NAME}}" >>./tmp.txt
      #        echo "AZURE_CONTAINER_REGISTRY_NAME: ${{secrets.AZURE_CONTAINER_REGISTRY_NAME}}" >>./tmp.txt
      #        echo "AZURE_AKS_NAME: ${{secrets.AZURE_AKS_NAME}}" >>./tmp.txt
      #        echo "DEPLOYMENT_CLIENT_IP: ${{steps.vars.outputs.DEPLOYMENT_CLIENT_IP}}" >>./tmp.txt
      #        echo "DB_NOT_INITIALIZED: ${{steps.vars.outputs.DB_NOT_INITIALIZED}}" >>./tmp.txt
      
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3.11
      
      - name: Deploy Azure resources
        id: deployment_aad
        run: |
          kvAccessIdentityName=`az identity list -g ${{secrets.AZURE_AKS_NODE_RESOURCE_GROUP}} --query "[?contains(name, 'keyvaultsecrets')].name" -o tsv`

          echo "Deploying with the following parameters:"
          echo "Admin name: '${{steps.vars.outputs.DB_ADMIN_NAME}}'"
          echo "Admin password: '${{steps.vars.outputs.DB_ADMIN_PASSWORD}}'"
          echo "App user name: '${{steps.vars.outputs.DB_APP_USER_NAME}}'"
          echo "App user password: '${{steps.vars.outputs.DB_APP_USER_PASSWORD}}'"
          echo "KV access identity: '${kvAccessIdentityName}'"
          echo "Client IP: ${{steps.vars.outputs.DEPLOYMENT_CLIENT_IP}}"

          az deployment group create \
              --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} \
              --template-file ./templates/aks-mi.bicep \
              --parameters location=${{secrets.AZURE_LOCATION}}  \
                           logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}  \
                           logAnalyticsWorkspaceRG=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}}  \
                           keyVaultName=${{secrets.AZURE_KEY_VAULT_NAME}}  \
                           keyVaultAccessIndentityName=${kvAccessIdentityName} \
                           appInsightsName=${{secrets.AZURE_APP_INSIGHTS_NAME}}  \
                           dbServerName=${{secrets.AZURE_DB_SERVER_NAME}} \
                           dbName=${{secrets.AZURE_DB_NAME}} \
                           dbAdminName=${{steps.vars.outputs.DB_ADMIN_NAME}} \
                           dbAdminPassword=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} \
                           dbUserName=${{steps.vars.outputs.DB_APP_USER_NAME}}@${{secrets.AZURE_DB_SERVER_NAME}} \
                           dbUserPassword=${{steps.vars.outputs.DB_APP_USER_PASSWORD}}@${{secrets.AZURE_DB_SERVER_NAME}} \
                           containerRegistryName=${{secrets.AZURE_CONTAINER_REGISTRY_NAME}} \
                           aksClusterName=${{secrets.AZURE_AKS_NAME}} \
                           aksAdminGroupObjectId=${{steps.vars.outputs.AZURE_AKS_ADMIN_GROUP_ID}} \
                           deploymentClientIPAddress=${{steps.vars.outputs.DEPLOYMENT_CLIENT_IP}} \
                           nodeResoureGroup=${{secrets.AZURE_AKS_NODE_RESOURCE_GROUP}} \
                           createDB=${{steps.vars.outputs.DB_NOT_INITIALIZED}}

          dbAppUserId=`az ad sp list --display-name ${{secrets.AZURE_AKS_NAME}} --query "[?displayName=='${{secrets.AZURE_AKS_NAME}}'].appId" --out tsv`

          echo "::set-output name=DB_APP_USER_ID::${dbAppUserId}"

      - name: Set-up DB AAD Integration
        run: |
          echo "Setting AAD DB Admin Group"
          az postgres server ad-admin create -s ${{secrets.AZURE_DB_SERVER_NAME}} -g ${{secrets.AZURE_RESOURCE_GROUP}} --object-id ${{steps.vars.outputs.AZURE_DBA_GROUP_ID}} --display-name "${{secrets.AZURE_DBA_GROUP_NAME}}"
  
      - name: Synchronize DB Schema
        run: |
          dbConnectionString="host=${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com port=5432 dbname=${{secrets.AZURE_DB_NAME}} user=${{steps.vars.outputs.DB_ADMIN_NAME}}@${{secrets.AZURE_DB_SERVER_NAME}} password=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} sslmode=require"
          psql "${dbConnectionString}" --file=./db.sql
        
      - name: Set-up classic DB User(s)
        #if: steps.vars.outputs.DB_AAD_INTEGRATION == 'false'
        run: |
          dbConnectionString="host=${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com port=5432 dbname=${{secrets.AZURE_DB_NAME}} user=${{steps.vars.outputs.DB_ADMIN_NAME}}@${{secrets.AZURE_DB_SERVER_NAME}} password=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} sslmode=require"
          
          dbUserExists=`psql "${dbConnectionString}" -tAc "SELECT 1 FROM pg_roles WHERE rolname='${{steps.vars.outputs.DB_APP_USER_NAME}}';"`
          if [[ $dbUserExists -ne '1' ]]; then
            echo "CREATE USER ${{steps.vars.outputs.DB_APP_USER_NAME}} WITH PASSWORD '${{steps.vars.outputs.DB_APP_USER_PASSWORD}}';" > ./create_user.sql
          else
            echo "ALTER USER ${{steps.vars.outputs.DB_APP_USER_NAME}} WITH PASSWORD '${{steps.vars.outputs.DB_APP_USER_PASSWORD}}';" > ./create_user.sql
          fi
          echo "GRANT CONNECT ON DATABASE ${{secrets.AZURE_DB_NAME}} TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql
          echo "GRANT USAGE ON SCHEMA public TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql
          echo "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql

          echo "User ${{steps.vars.outputs.DB_ADMIN_NAME}} is running a user creation script:"
          cat ./create_user.sql

          psql "${dbConnectionString}" --file=./create_user.sql

          echo "List of existing users:"
          psql "${dbConnectionString}" -tAc "SELECT * FROM pg_roles;"

      # - name: If AAD, set-up AAD DB User(s)
      #   if: steps.vars.outputs.DB_AAD_INTEGRATION == 'true'
      #   run: |
      #     echo "SET aad_validate_oids_in_tenant = off;" > ./create_user.sql
      #     echo "CREATE ROLE ${{steps.vars.outputs.DB_APP_USER_NAME}} WITH LOGIN PASSWORD '${{steps.deployment_aad.outputs.DB_APP_USER_ID}}' IN ROLE azure_ad_user;" >> ./create_user.sql
      #     echo "GRANT CONNECT ON DATABASE ${{secrets.AZURE_DB_NAME}} TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql
      #     echo "GRANT USAGE ON SCHEMA public TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql
      #     echo "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql
          
      #     echo "User group {{secrets.AZURE_DB_SERVER_NAME}} is running AAD user creation script:"
      #     cat ./create_user.sql

      #     export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`

      #     psql --set=sslmode=require -h ${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com -p 5432 -d ${{secrets.AZURE_DB_NAME}} -U "${{secrets.AZURE_DBA_GROUP_NAME}}@${{secrets.AZURE_DB_SERVER_NAME}}" --file=./create_user.sql

      #     echo "List of existing users:"
      #     psql --set=sslmode=require -h ${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com -p 5432 -d ${{secrets.AZURE_DB_NAME}} -U "${{secrets.AZURE_DBA_GROUP_NAME}}@${{secrets.AZURE_DB_SERVER_NAME}}" -tAc "SELECT * FROM pg_roles;"
