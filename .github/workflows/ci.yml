name: ci

on:
  push:
   branches:
     - main
   paths:
     - 'todoapi/**'
     - 'todoweb/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    
    - name: Semver for API
      uses: PaulHatch/semantic-version@v5.0.3
      id: api_version
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "(MAJOR)"
        # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
        major_regexp_flags: ""
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "(MINOR)"
        # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
        minor_regexp_flags: ""
        # A string to determine the format of the version output
        version_format: "${major}.${minor}.${patch}-prerelease${increment}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        change_path: "todoapi"
        # Named version, will be used as suffix for name version tag
        namespace: api
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: true
        # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
        search_commit_body: true
        # The output method used to generate list of users, 'csv' or 'json'.
        user_format_type: "csv"
        # Prevents pre-v1.0.0 version from automatically incrementing the major version.
        # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
        # enable_prerelease_mode: false
    - name: Semver for WEB
      uses: PaulHatch/semantic-version@v5.0.3
      id: web_version
      with:
        tag_prefix: "v"
        major_pattern: "(MAJOR)"
        major_regexp_flags: ""
        minor_pattern: "(MINOR)"
        minor_regexp_flags: ""
        version_format: "${major}.${minor}.${patch}-prerelease${increment}"
        change_path: "todoweb"
        namespace: web
        bump_each_commit: true
        search_commit_body: true
      
    - name: Set API Version
      run: |
         echo "Version: ${{steps.api_version.outputs.version}}" |
         echo "VersionTag: ${{steps.api_version.outputs.version_tag}}" |
         echo "IsChanged: ${{steps.api_version.outputs.changed}}" |
         echo "IsTagged: ${{steps.api_version.outputs.is_tagged }}"

    - name: Set WEB Version
      run: |
         echo "Version: ${{steps.web_version.outputs.version}}" |
         echo "VersionTag: ${{steps.web_version.outputs.version_tag}}" |
         echo "IsChanged: ${{steps.web_version.outputs.changed}}" |
         echo "IsTagged: ${{steps.web_version.outputs.is_tagged }}"
