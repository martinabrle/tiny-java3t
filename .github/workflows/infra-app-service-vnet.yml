name: infra-app-service-vnet

on:
  push:
   branches:
     - main
   paths:
     - 'scripts/**'     
  workflow_dispatch:
    inputs:
      run_cleanup:
        type: boolean
        description: Delete all existing resources first
        required: true

jobs:
  cleanup_if_requested:
    runs-on: ubuntu-latest
    environment: APP-SERVICE-VNET
    steps:
      - name: Azure login
        if: github.event.inputs.run_cleanup == 'true'
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set default Azure subscription
        if: github.event.inputs.run_cleanup == 'true'
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Remove the resource group
        if: github.event.inputs.run_cleanup == 'true'
        run: |
          RG_EXISTS=$(az group exists --name ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          if [[ "$RG_EXISTS" == "true" ]]; then
             echo "Deleting the Todo App app resource group"
             az group delete --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} --yes
          fi

  deploy_log_analytics_if_needed:
    # Having this as a separte Job, as there are many situations where Log Analytics
    # workspace would be outside of the current subscription
    needs: [cleanup_if_requested]
    runs-on: ubuntu-latest
    environment: APP-SERVICE-VNET
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set default Azure subscription
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Check the resource group exists
        id: logs_rg_exists
        run: |
          LOGS_RG_EXISTS=$(az group exists --name ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          echo "LOGS_RG_EXISTS=${LOGS_RG_EXISTS}" >> $GITHUB_OUTPUT

      - name: Create Logs Workspace Azure resource group
        if: steps.logs_rg_exists.outputs.LOGS_RG_EXISTS == 'false'
        run: |
          az deployment sub create \
           --location ${{secrets.AZURE_LOCATION}} \
           --template-file ./templates/components/rg.bicep \
           --parameters name=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} location=${{secrets.AZURE_LOCATION}} resourceTags="${{secrets.AZURE_RESOURCE_TAGS}}"

      - name: Deploy Log Workspace
        if: steps.logs_rg_exists.outputs.LOGS_RG_EXISTS == 'false'
        run: |
          az deployment group create --resource-group ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} --template-file ./templates/components/logs.bicep \
                        --parameters location=${{secrets.AZURE_LOCATION}}  \
                                     logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}

  deploy_infra:
    needs: [deploy_log_analytics_if_needed]
    runs-on: ubuntu-latest
    environment: APP-SERVICE-VNET
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      
      - name: Set default Azure subscription
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}
      
      - name: Purge deleted KV if found
        run: |
          kvDeletedQuery="[?name == '${{secrets.AZURE_KEY_VAULT_NAME}}'].id"
          kvDeletedExists=`az keyvault list-deleted --query "$kvDeletedQuery" -o tsv`
          if [[ ! -z "$kvDeletedExists" ]]; then
            echo "Deleted KeyVault exists, purging it and waiting for 10 mins"
            az keyvault purge -l ${{secrets.AZURE_LOCATION}} -n ${{secrets.AZURE_KEY_VAULT_NAME}}
          fi
        
      - name: Create Azure resource group
        run: |
          az deployment sub create \
           --location ${{secrets.AZURE_LOCATION}} \
           --template-file ./templates/components/rg.bicep \
           --parameters name=${{secrets.AZURE_RESOURCE_GROUP}} location=${{secrets.AZURE_LOCATION}} resourceTags="${{secrets.AZURE_RESOURCE_TAGS}}"
        
      - name: Initialize deployment variables
        id: vars
        run: |
          ghVMAdminName=""
          ghVMAdminPassword=""
          mgmtVMAdminName=""
          mgmtVMAdminPassword=""
          kvExists=`az keyvault list -g "${{secrets.AZURE_RESOURCE_GROUP}}" --query "[?name=='${{secrets.AZURE_KEY_VAULT_NAME}}'].name" -o tsv`
          if [[ ! -z "$kvExists" ]]; then
            kvSecretExists=`az keyvault secret list --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --query "[?name=='GH-RUNNER-VM-ADMIN-NAME'].name" -o tsv`
            if [[ ! -z "$kvSecretExists" ]]; then
              ghVMAdminName=`az keyvault secret show --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --name "GH-RUNNER-VM-ADMIN-NAME" --query "[value]" -o tsv`
            fi
            kvSecretExists=`az keyvault secret list --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --query "[?name=='GH-RUNNER-VM-ADMIN-PWD'].name" -o tsv`
            if [[ ! -z "$kvSecretExists" ]]; then
              ghVMAdminPassword=`az keyvault secret show --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --name "GH-RUNNER-VM-ADMIN-PWD" --query "[value]" -o tsv`
            fi
            kvSecretExists=`az keyvault secret list --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --query "[?name=='MGMT-VM-ADMIN-NAME'].name" -o tsv`
            if [[ ! -z "$kvSecretExists" ]]; then
              mgmtVMAdminName=`az keyvault secret show --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --name "MGMT-VM-ADMIN-NAME" --query "[value]" -o tsv`
            fi
            kvSecretExists=`az keyvault secret list --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --query "[?name=='MGMT-VM-ADMIN-PWD'].name" -o tsv`
            if [[ ! -z "$kvSecretExists" ]]; then
              mgmtVMAdminPassword=`az keyvault secret show --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --name "MGMT-VM-ADMIN-PWD" --query "[value]" -o tsv`
            fi
          fi
          
          if [[ -z "$ghVMAdminName" ]]; then
            ghVMAdminName="a`openssl rand -hex 6`"
          fi
          if [[ -z "$ghVMAdminPassword" ]]; then
            ghVMAdminPassword="`openssl rand -hex 25`#@"
          fi
          if [[ -z "$mgmtVMAdminName" ]]; then
            mgmtVMAdminName="a`openssl rand -hex 6`"
          fi
          if [[ -z "$mgmtVMAdminPassword" ]]; then
            mgmtVMAdminPassword="`openssl rand -hex 25`#@"
          fi

          echo "GH Admin name: $ghVMAdminName"
          echo "GH_RUNNER_VM_ADMIN_NAME=${ghVMAdminName}" >> $GITHUB_OUTPUT

          echo "::add-mask::$ghVMAdminPassword"
          echo "GH Admin password: $ghVMAdminPassword"
          echo "GH_RUNNER_VM_ADMIN_PWD=${ghVMAdminPassword}" >> $GITHUB_OUTPUT
          
          echo "MGMT VM Admin name: $mgmtVMAdminName"
          echo "MGMT_VM_ADMIN_NAME=${mgmtVMAdminName}" >> $GITHUB_OUTPUT

          echo "::add-mask::$mgmtVMAdminPassword"
          echo "MGMT VM Admin password: $mgmtVMAdminPassword"
          echo "MGMT_VM_ADMIN_PWD=${mgmtVMAdminPassword}" >> $GITHUB_OUTPUT

          dbAppUserName=`echo "${{secrets.AZURE_API_APP_NAME}}" | tr '-' '_'`;
          echo "DB_APP_USER_NAME=${dbAppUserName}" >> $GITHUB_OUTPUT
          echo "App user name: $dbAppUserName"

          dbStagingAppUserName=`echo "${{secrets.AZURE_API_APP_NAME}}-staging" | tr '-' '_'`;
          echo "DB_STAGING_APP_USER_NAME=${dbStagingAppUserName}" >> $GITHUB_OUTPUT
          echo "Staging app user name: $dbStagingAppUserName"         

          if [[ -z "${{secrets.AZURE_DBA_GROUP_NAME}}" ]]; then
            echo "DBA Group name is not set"
            exit 1
          fi

          dbaGroupId=`az ad group show --group "${{secrets.AZURE_DBA_GROUP_NAME}}" --query '[id]' -o tsv`
          echo "DBA Group Name: '${{secrets.AZURE_DBA_GROUP_NAME}}'"
          echo "DBA Group Id: $dbaGroupId"
          echo "AZURE_DBA_GROUP_ID=${dbaGroupId}" >> $GITHUB_OUTPUT

          export appName=`az webapp list -g ${{secrets.AZURE_RESOURCE_GROUP}} --query "[?name=='${{secrets.AZURE_API_APP_NAME}}'].name" -o tsv`
          if [[ -z "$appName" ]]; then
            echo "First deployment"
            echo "API_HEALTH_CHECK_PATH=" >> $GITHUB_OUTPUT
            echo "WEB_HEALTH_CHECK_PATH=" >> $GITHUB_OUTPUT
            echo "APP_CLIENT_ID=" >> $GITHUB_OUTPUT
            echo "STAGING_APP_CLIENT_ID=" >> $GITHUB_OUTPUT
          else
            healthCheckPath=`az webapp show -g ${{secrets.AZURE_RESOURCE_GROUP}} -n "${{secrets.AZURE_API_APP_NAME}}" --query "siteConfig.healthCheckPath" -o tsv`
            echo "API_HEALTH_CHECK_PATH=${healthCheckPath}" >> $GITHUB_OUTPUT
            healthCheckPath=`az webapp show -g ${{secrets.AZURE_RESOURCE_GROUP}} -n "${{secrets.AZURE_WEB_APP_NAME}}" --query "siteConfig.healthCheckPath" -o tsv`
            echo "WEB_HEALTH_CHECK_PATH=${healthCheckPath}" >> $GITHUB_OUTPUT
            appClientId=`az ad sp list --display-name "${{secrets.AZURE_API_APP_NAME}}" --query "[?displayName=='${{secrets.AZURE_API_APP_NAME}}'].appId" --out tsv`
            echo "APP_CLIENT_ID=${appClientId}" >> $GITHUB_OUTPUT
            stagingAppClientId=`az ad sp list --display-name "${{secrets.AZURE_API_APP_NAME}}/slots/staging" --query "[?displayName=='${{secrets.AZURE_API_APP_NAME}}/slots/staging'].appId" --out tsv`
            echo "STAGING_APP_CLIENT_ID=${stagingAppClientId}" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate a GH registration token
        id: gh_registration_token
        run: |
          token=`curl -L \
                      -X POST \
                      -H "Accept: application/vnd.github+json" \
                      -H "Authorization: Bearer ${{secrets.GH_TOKEN}}"\
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      https://api.github.com/orgs/ORG/actions/runners/registration-token`
          echo "token"
          echo $token
          token=`jq -r ".token"`
          echo "TOKEN=${token}" >> $GITHUB_OUTPUT
      - name: Deploy Azure resources
        id: deployment
        run: |
          echo "Deploying with the following parameters:"
          echo "API App service name: '${{secrets.AZURE_API_APP_NAME}}'"
          echo "API App port: '${{secrets.AZURE_API_APP_PORT}}'"
          echo "WEB App service name: '${{secrets.AZURE_WEB_APP_NAME}}'"
          echo "WEB App port: '${{secrets.AZURE_WEB_APP_PORT}}'"
          echo "DBA Group Name: '${{secrets.AZURE_DBA_GROUP_NAME}}'"
          echo "DBA Group Id: '${{steps.vars.outputs.AZURE_DBA_GROUP_ID}}'"
          echo "User name: '${{steps.vars.outputs.DB_APP_USER_NAME}}'"
          echo "GH Token: '${{steps.vars.outputs.TOKEN}}'"
          
          az deployment group create \
                        --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} \
                        --template-file ./templates/app-service-mi-vnet.bicep \
                        --parameters location=${{secrets.AZURE_LOCATION}}  \
                                     logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}  \
                                     logAnalyticsWorkspaceRG=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} \
                                     keyVaultName=${{secrets.AZURE_KEY_VAULT_NAME}}  \
                                     appInsightsName=${{secrets.AZURE_APP_INSIGHTS_NAME}}  \
                                     dbServerName=${{secrets.AZURE_DB_SERVER_NAME}} \
                                     dbServerAADAdminGroupObjectId=${{steps.vars.outputs.AZURE_DBA_GROUP_ID}} \
                                     dbServerAADAdminGroupName="${{secrets.AZURE_DBA_GROUP_NAME}}" \
                                     dbName=${{secrets.AZURE_DB_NAME}} \
                                     bastionName=${{secrets.AZURE_BASTION_NAME}} \
                                     managementVMName=${{secrets.AZURE_MGMT_VM_NAME}} \
                                     managementVMAdminName=${{steps.vars.outputs.MGMT_VM_ADMIN_NAME}} \
                                     managementVMAdminPassword=${{steps.vars.outputs.MGMT_VM_ADMIN_PWD}} \
                                     ghRunnerVMName=${{secrets.AZURE_GH_RUNNER_NAME}} \
                                     ghRunnerVMAdminName=${{steps.vars.outputs.GH_RUNNER_VM_ADMIN_NAME}} \
                                     ghRunnerVMAdminPassword=${{steps.vars.outputs.GH_RUNNER_VM_ADMIN_PWD}} \
                                     ghRunnerToken=${{steps.vars.outputs.TOKEN}} \
                                     dbUserName=${{steps.vars.outputs.DB_APP_USER_NAME}} \
                                     dbStagingUserName=${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}} \
                                     appClientId="${{steps.vars.outputs.APP_CLIENT_ID}}" \
                                     stagingAppClientId="${{steps.vars.outputs.STAGING_APP_CLIENT_ID}}" \
                                     apiAppServiceName=${{secrets.AZURE_API_APP_NAME}} \
                                     apiAppServicePort=${{secrets.AZURE_API_APP_PORT}} \
                                     webAppServiceName=${{secrets.AZURE_WEB_APP_NAME}} \
                                     webAppServicePort=${{secrets.AZURE_WEB_APP_PORT}} \
                                     apiHealthCheckPath="${{steps.vars.outputs.API_HEALTH_CHECK_PATH}}" \
                                     webHealthCheckPath="${{steps.vars.outputs.WEB_HEALTH_CHECK_PATH}}"

                                      # dbAdminName=${{steps.vars.outputs.DB_ADMIN_NAME}} \
                                      # dbAdminPassword=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} \      
      - name: Init AAD ClientId
        id: deployment_aad
        run: |
          dbAppUserId=`az ad sp list --display-name "${{secrets.AZURE_API_APP_NAME}}" --query "[?displayName=='${{secrets.AZURE_API_APP_NAME}}'].appId" --out tsv`
          echo "DB_APP_USER_ID=${dbAppUserId}" >> $GITHUB_OUTPUT

          dbStagingAppUserId=`az ad sp list --display-name "${{secrets.AZURE_API_APP_NAME}}/slots/staging" --query "[?displayName=='${{secrets.AZURE_API_APP_NAME}}/slots/staging'].appId" --out tsv`
          echo "DB_STAGING_APP_USER_ID=${dbStagingAppUserId}" >> $GITHUB_OUTPUT

          #Following is a workaround - I still did not figure out how to retrieve AppId in bicep
          az keyvault secret set --vault-name "${{secrets.AZURE_KEY_VAULT_NAME}}" --name "SPRING-DATASOURCE-APP-CLIENT-ID" --value "${dbAppUserId}" --content-type "string"
          az keyvault secret set --vault-name "${{secrets.AZURE_KEY_VAULT_NAME}}" --name "SPRING-DATASOURCE-APP-CLIENT-ID-STAGING" --value "${dbStagingAppUserId}" --content-type "string"
