name: cd-app-service-classic

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: Full version tag (e.g. "v1.0.5-web")

jobs:  
  build_app:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_VERSION: ${{ steps.init.outputs.RELEASE_VERSION }}
      RELEASE_TYPE: ${{ steps.init.outputs.RELEASE_TYPE }}
      
    steps:
      - name: Init
        id: init
        run: |
          releaseVersion=""
          if [[ "${{github.event_name}}" == "release" ]]; then
            echo "Workflow started with on 'release' trigger"
            releaseVersion="${GITHUB_REF#refs/*/}"
          elif [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
            releaseVersion="${{inputs.version}}" 
          else
            echo "Unknown trigger: '${{github.event_name}}'"
            exit 1
          fi
          echo "Release version to deploy: ${releaseVersion}"
          
          releaseType=""
          if [[ $releaseVersion == "*web" ]]; then
            releaseType="web"
          elif [[ $releaseVersion == "*api" ]]; then
            releaseType="api"
          else
            echo "Unknown release artefact type"
            exit 1
          fi
          echo "Release artifact type to deploy: ${releaseType}"

          echo "RELEASE_TYPE=${releaseType}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${releaseVersion}" >> $GITHUB_OUTPUT

  init_app_service_classic:
    runs-on: ubuntu-latest
    environment: APP-SERVICE-CLASSIC
    outputs:
      ENVIRONMENT_DEPLOYED: ${{ steps.init.outputs.ENVIRONMENT_DEPLOYED }}    
    steps:
      - name: Check environment exists
        id: init
        run: |
          RG_EXISTS=$(az group exists --name ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          if [[ "$RG_EXISTS" == "true" ]]; then
            echo "ENVIRONMENT_DEPLOYED=true" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT_DEPLOYED=false" >> $GITHUB_OUTPUT
          fi

  init_app_service_mi:
    runs-on: ubuntu-latest
    environment: APP-SERVICE-MI
    outputs:
      ENVIRONMENT_DEPLOYED: ${{ steps.init.outputs.ENVIRONMENT_DEPLOYED }}    
    steps:
      - name: Check environment exists
        id: init
        run: |
          RG_EXISTS=$(az group exists --name ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          if [[ "$RG_EXISTS" == "true" ]]; then
            echo "ENVIRONMENT_DEPLOYED=true" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT_DEPLOYED=false" >> $GITHUB_OUTPUT
          fi

  init_app_service_vnet:
    runs-on: ubuntu-latest
    environment: APP-SERVICE-VNET
    outputs:
      ENVIRONMENT_DEPLOYED: ${{ steps.init.outputs.ENVIRONMENT_DEPLOYED }}    
    steps:
      - name: Check environment exists
        id: init
        run: |
          RG_EXISTS=$(az group exists --name ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          if [[ "$RG_EXISTS" == "true" ]]; then
            echo "ENVIRONMENT_DEPLOYED=true" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT_DEPLOYED=false" >> $GITHUB_OUTPUT
          fi  
  
  deploy_app_service_mi:
    needs: [init_app_service_classic]
    runs-on: ubuntu-latest
    if: ${{contains(needs.init_app_service_classic.outputs.ENVIRONMENT_DEPLOYED, true)}}
    environment: APP-SERVICE-MI
    
    steps:
      - name: Test
        run: |
          echo "Running"
      # - name: Download build artefacts
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: ${{needs.build_app.outputs.RELEASE_NAME}}
      
      # - name: Check downloaded files
      #   run: |
      #     pwd
      #     ls -la
      #     ls -la ./${{needs.build_app.outputs.RELEASE_FILE_NAME}}
      
      # - name: Azure login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Set default Azure subscription
      #   run: az account set -s ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # - name: Start the STAGING slot
      #   run: |
      #     az webapp start -g ${{secrets.AZURE_RESOURCE_GROUP}} -n ${{secrets.AZURE_API_APP_NAME}} --slot staging

      # # Sometimes it helps to use the following - as azure/webapps-deploy@v2 output may be a bit confusing at times
      # - name: Deploy to STAGING AppService
      #   run: az webapp deploy -g ${{secrets.AZURE_RESOURCE_GROUP}} --name ${{secrets.AZURE_API_APP_NAME}} --slot staging --type jar --src-path ./${{needs.build_app.outputs.RELEASE_FILE_NAME}}
      
      # - name: Process input variables
      #   id: input_vars
      #   run: |
      #     echo "Processing PUSH event: ${{github.event_name}}"
      #     if [[ $(az group exists --name "${{secrets.AZURE_RESOURCE_GROUP}}") = false ]]; then
      #       echo "Nothing deployed yet, should not happen here, choosing MANAGED_IDENTITIES"
      #       echo "DEPLOYMENT_ENVIRONMENT=MANAGED_IDENTITIES" >> $GITHUB_OUTPUT
      #     else
      #       vnetList=`az network vnet list -g "${{secrets.AZURE_RESOURCE_GROUP}}" --query "[]" -o tsv`
      #       if [[ -z "$vnetList" ]]; then
      #         appClientIdExists=$(az keyvault secret list --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --query "contains([].id, 'https://${{secrets.AZURE_KEY_VAULT_NAME}}.vault.azure.net/secrets/SPRING-DATASOURCE-APP-CLIENT-ID')")
      #         if [ $appClientIdExists == true ]; then
      #           echo "App client ID exists, setting MANAGED_IDENTITIES"
      #           echo "DEPLOYMENT_ENVIRONMENT=MANAGED_IDENTITIES" >> $GITHUB_OUTPUT
      #         else
      #           echo "App client ID does not exist, setting CLASSIC"
      #           echo "DEPLOYMENT_ENVIRONMENT=CLASSIC" >> $GITHUB_OUTPUT
      #         fi
      #       else
      #         echo "VNET Deployed, setting VNET"
      #         echo "DEPLOYMENT_ENVIRONMENT=VNET" >> $GITHUB_OUTPUT
      #       fi
      #     fi
      
      # - name: Wait for STAGING AppService warm-up
      #   run: |
      #     ###################################################
      #     #TODO:set firewall exception for the staging slot
      #     ###################################################
      #     currentDateTime=`date`
      #     echo "Starting the warm-up wait: ${currentDateTime}"
      #     sleep 240 #First wait for 4 mins, sometimes it may take time for the deployment process to start
      #     noOfAttempts=0
      #     until $(curl --silent --output /dev/null --head --fail https://${{secrets.AZURE_API_APP_NAME}}-staging.azurewebsites.net/actuator/health/readiness); do
      #       if [[ ${noOfAttempts} -eq 60 ]];then
      #         echo "Web site failed to come online within 10 mins"
      #         exit 1
      #       fi
      #       noOfAttempts=$(($noOfAttempts+1))
      #       sleep 10
      #     done
      #     currentDateTime=`date`
      #     echo "Finnished the warm-up wait: ${currentDateTime}"
      #     echo "Service warmed up after ${noOfAttempts} attempts"

      # # - name: Deploy to AppService
      # #   uses: azure/webapps-deploy@v2
      # #   with: 
      # #     app-name: ${{secrets.AZURE_API_APP_NAME}}
      # #     package: ./${{needs.build_app.outputs.RELEASE_FILE_NAME}}

      # - name: Run STAGING integration test(s)
      #   run: |
      #     status_code=$(curl --write-out "%{http_code}\n" --silent --output /dev/null "https://${{secrets.AZURE_API_APP_NAME}}-staging.azurewebsites.net/api/todos/")
      #     if [[ "$status_code" -ne '200' ]] ; then
      #       echo "Integration tests have failed"
      #       exit 1
      #     fi

      # - name: Remove AppService Liveness probe
      #   run: |
      #     az webapp config set -g ${{secrets.AZURE_RESOURCE_GROUP}} -n ${{secrets.AZURE_API_APP_NAME}} --generic-configurations '{"healthCheckPath": ""}'
      #     sleep 180
      
      # # - name: Deploy to PRODUCTION AppService
      # #   run:  |
      # #     az webapp deploy -g ${{secrets.AZURE_RESOURCE_GROUP}} --name ${{secrets.AZURE_API_APP_NAME}} --type jar --src-path ./${{needs.build_app.outputs.RELEASE_FILE_NAME}}
      
      # - name: Swap STAGING and PRODUCTION
      #   run:  |
      #     az webapp deployment slot swap -g ${{secrets.AZURE_RESOURCE_GROUP}} --name ${{secrets.AZURE_API_APP_NAME}} --slot staging
      #     sleep 180

      # - name: Check the new PRODUCTION has warmed-up
      #   if: steps.input_vars.outputs.DEPLOYMENT_ENVIRONMENT != 'VNET'
      #   run: |
      #     currentDateTime=`date`
      #     echo "Production: starting the warm-up wait: ${currentDateTime}"
      #     sleep 240 #First wait for 4 mins, sometimes it may take time for the swap process to finish (unless warm up optimization has been done)
      #     noOfAttempts=0
      #     until $(curl --silent --output /dev/null --head --fail https://${{secrets.AZURE_API_APP_NAME}}.azurewebsites.net/actuator/health/readiness); do
      #       if [[ ${noOfAttempts} -eq 60 ]];then
      #         echo "Web site failed to come online within 10 mins"
      #         exit 1
      #       fi
      #       noOfAttempts=$(($noOfAttempts+1))
      #       sleep 10
      #     done
      #     currentDateTime=`date`
      #     echo "Production: finnished the warm-up wait: ${currentDateTime}"
      #     echo "Production: service warmed up after ${noOfAttempts} attempts"

      # - name: Set PRODUCTION AppService Liveness probe
      #   run: |
      #     currentDateTime=`date`
      #     echo "Starting the probe set-up: ${currentDateTime}"
      #     az webapp config set -g ${{secrets.AZURE_RESOURCE_GROUP}} -n ${{secrets.AZURE_API_APP_NAME}} --generic-configurations '{"healthCheckPath": "/actuator/health/liveness"}'
      #     currentDateTime=`date`
      #     echo "Finnished the probe set-up: ${currentDateTime}"
      
      # - name: Stop STAGING slot
      #   run: |
      #     az webapp stop -g ${{secrets.AZURE_RESOURCE_GROUP}} -n ${{secrets.AZURE_API_APP_NAME}} --slot staging
      #     ###################################################
      #     #TODO:unset firewall exception for the staging slot
      #     ###################################################
