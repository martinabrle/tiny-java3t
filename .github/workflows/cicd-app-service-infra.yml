name: cicd-app-service-infra

on:
  push:
   branches:
     - main
   paths:
     - 'scripts/**'     
  workflow_dispatch:
    inputs:
      run_cleanup:
        type: boolean
        description: Delete all existing resources first
        required: true
      deployment_environment:
        type: choice
        description: Deployment environment
        required: true
        options: 
        - CLASSIC
        - MANAGED_IDENTITIES
        - VNET

jobs:
  cleanup_if_requested:
    runs-on: ubuntu-latest
    environment: APP-SERVICE
    steps:
      - name: Azure login
        if: github.event.inputs.run_cleanup == 'true'
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set default Azure subscription
        if: github.event.inputs.run_cleanup == 'true'
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Remove the resource group
        if: github.event.inputs.run_cleanup == 'true'
        run: |
          RG_EXISTS=$(az group exists --name ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          if [[ "$RG_EXISTS" == "true" ]]; then
             echo "Deleting the Todo App app resource group"
             az group delete --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} --yes
          fi

  deploy_log_analytics_if_needed:
    # Having this as a separte Job, as there are many situations where Log Analytics
    # workspace would be outside of the current subscription
    needs: [cleanup_if_requested]
    runs-on: ubuntu-latest
    environment: APP-SERVICE
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Set default Azure subscription
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}

      - name: Check the resource group exists
        id: logs_rg_exists
        run: |
          LOGS_RG_EXISTS=$(az group exists --name ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}})
          echo "::set-output name=LOGS_RG_EXISTS::${LOGS_RG_EXISTS}"

      - name: Create Logs Workspace Azure resource group
        if: steps.logs_rg_exists.outputs.LOGS_RG_EXISTS == 'false'
        run: |
          az deployment sub create \
           --location ${{secrets.AZURE_LOCATION}} \
           --template-file ./templates/components/rg.bicep \
           --parameters name=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} location=${{secrets.AZURE_LOCATION}} resourceTags="${{secrets.AZURE_RESOURCE_TAGS}}"

      - name: Deploy Log Workspace
        if: steps.logs_rg_exists.outputs.LOGS_RG_EXISTS == 'false'
        run: |
          az deployment group create --resource-group ${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} --template-file ./templates/components/logs.bicep \
                        --parameters location=${{secrets.AZURE_LOCATION}}  \
                                     logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}

  deploy_infra:
    needs: [deploy_log_analytics_if_needed]
    runs-on: ubuntu-latest
    environment: APP-SERVICE
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      
      - name: Set default Azure subscription
        run: az account set -s ${{secrets.AZURE_SUBSCRIPTION_ID}}
      
      - name: Purge deleted KV if found
        run: |
          kvDeletedQuery="[?name == '${{secrets.AZURE_KEY_VAULT_NAME}}'].id"
          kvDeletedExists=`az keyvault list-deleted --query "$kvDeletedQuery" -o tsv`
          if [[ ! -z "$kvDeletedExists" ]]; then
            echo "Deleted KeyVault exists, purging it and waiting for 10 mins"
            az keyvault purge -l ${{secrets.AZURE_LOCATION}} -n ${{secrets.AZURE_KEY_VAULT_NAME}}
          fi
      
      - name: Process input variables
        id: input_vars
        run: |
          if [[ "${{github.event_name}}" == 'workflow_dispatch' ]]; then
            echo "Processing manual dispatch (${{github.event_name}}): ${{github.event.inputs.deployment_environment}}"
            echo "::set-output name=DEPLOYMENT_ENVIRONMENT::${{github.event.inputs.deployment_environment}}"
          else
            echo "Processing PUSH event: ${{github.event_name}}"
            if [[ $(az group exists --name "${{secrets.AZURE_RESOURCE_GROUP}}") = false ]]; then
              echo "Nothing deployed yet, choosing MANAGED_IDENTITIES"
              echo "::set-output name=DEPLOYMENT_ENVIRONMENT::MANAGED_IDENTITIES"
            else
              vnetList=`az network vnet list -g "${{secrets.AZURE_RESOURCE_GROUP}}" --query "[]" -o tsv`
              if [[ -z "$vnetList" ]]; then
                appClientIdExists=$(az keyvault secret list --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --query "contains([].id, 'https://${{secrets.AZURE_KEY_VAULT_NAME}}.vault.azure.net/secrets/SPRING-DATASOURCE-APP-CLIENT-ID')")
                if [ $appClientIdExists == true ]; then
                  echo "App client ID exists, setting MANAGED_IDENTITIES"
                  echo "::set-output name=DEPLOYMENT_ENVIRONMENT::MANAGED_IDENTITIES"
                else
                  echo "App client ID does not exist, setting CLASSIC"
                  echo "::set-output name=DEPLOYMENT_ENVIRONMENT::CLASSIC"
                fi
              else
                echo "VNET Deployed already, setting VNET"
                echo "::set-output name=DEPLOYMENT_ENVIRONMENT::VNET"
              fi
            fi
          fi
      
      - name: Create Azure resource group
        run: |
          az deployment sub create \
           --location ${{secrets.AZURE_LOCATION}} \
           --template-file ./templates/components/rg.bicep \
           --parameters name=${{secrets.AZURE_RESOURCE_GROUP}} location=${{secrets.AZURE_LOCATION}} resourceTags="${{secrets.AZURE_RESOURCE_TAGS}}"

      - name: Initialize deployment variables
        id: vars
        run: |
          clientIP=`dig +short myip.opendns.com @resolver1.opendns.com.`
          echo "::set-output name=DEPLOYMENT_CLIENT_IP::${clientIP}"
          echo "Client IP: $clientIP"
          echo "Deployment type: ${{steps.input_vars.outputs.DEPLOYMENT_ENVIRONMENT}}"

          dbAdminName=`az postgres flexible-server list --query "[?fullyQualifiedDomainName == '${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com'].administratorLogin" -o tsv`
          if [[ -z "$dbAdminName" ]]; then
            echo "This is a new deployment, generating a new admin name"
            dbAdminName="a`openssl rand -hex 5`"
          fi
          echo "Admin name: $dbAdminName"
          echo "::set-output name=DB_ADMIN_NAME::${dbAdminName}"
          
          dbAdminPassword=""
          kvExists=`az keyvault list -g "${{secrets.AZURE_RESOURCE_GROUP}}" --query "[?name=='${{secrets.AZURE_KEY_VAULT_NAME}}'].name" -o tsv`
          if [[ ! -z "$kvExists" ]]; then
            kvSecretExists=`az keyvault secret list --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --query "[?name=='DB-ADMIN-PASSWORD'].name" -o tsv`
            if [[ ! -z "$kvExists" ]]; then
              dbAdminPassword=`az keyvault secret show --vault-name ${{secrets.AZURE_KEY_VAULT_NAME}} --name "DB-ADMIN-PASSWORD" --query "[value]" -o tsv`
            fi
          fi
          if [[ -z "$dbAdminPassword" ]]; then
            dbAdminPassword="`openssl rand -hex 25`#@"
          fi
          echo "Admin password: $dbAdminPassword"
          echo "::add-mask::$dbAdminPassword"
          echo "::set-output name=DB_ADMIN_PASSWORD::${dbAdminPassword}"
          
          dbAppUserName=`echo "${{secrets.AZURE_API_APP_NAME}}" | tr '-' '_'`;
          echo "::set-output name=DB_APP_USER_NAME::${dbAppUserName}"
          echo "App user name: $dbAppUserName"

          dbStagingAppUserName=`echo "${{secrets.AZURE_API_APP_NAME}}-staging" | tr '-' '_'`;
          echo "::set-output name=DB_STAGING_APP_USER_NAME::${dbStagingAppUserName}"
          echo "Staging app user name: $dbStagingAppUserName"         

          if [[ "${{steps.input_vars.outputs.DEPLOYMENT_ENVIRONMENT}}" -ne 'CLASSIC' ]]; then
            if [[ -z "${{secrets.AZURE_DBA_GROUP_NAME}}" ]]; then
              echo "DBA Group name is not set"
              exit 1
            fi
          fi

          if [[ "${{steps.input_vars.outputs.DEPLOYMENT_ENVIRONMENT}}" == 'CLASSIC' ]]; then
            dbAppUserPassword="`openssl rand -hex 25`#@"
            echo "::add-mask::$dbAppUserPassword"
            dbStagingAppUserPassword="`openssl rand -hex 25`#@"
            echo "::add-mask::$dbStagingAppUserPassword"
            echo "::set-output name=DB_APP_USER_PASSWORD::${dbAppUserPassword}"
            echo "::set-output name=DB_STAGING_APP_USER_PASSWORD::${dbStagingAppUserPassword}"
            echo "::set-output name=DB_AAD_INTEGRATION::false"
            echo "::set-output name=APP_SPRING_PROFILE::test"
          else
            dbaGroupId=`az ad group show --group "${{secrets.AZURE_DBA_GROUP_NAME}}" --query '[id]' -o tsv`
            echo "DBA Group Id: $dbaGroupId"
            echo "::set-output name=AZURE_DBA_GROUP_ID::${dbaGroupId}"
            echo "::set-output name=DB_AAD_INTEGRATION::true"
            echo "::set-output name=APP_SPRING_PROFILE::test-mi"
          fi

          export appName=`az webapp list -g ${{secrets.AZURE_RESOURCE_GROUP}} --query "[?name=='${{secrets.AZURE_API_APP_NAME}}'].name" -o tsv`
          if [[ -z "$appName" ]]; then
            echo "::set-output name=FIRST_DEPLOYMENT::true"
            echo "::set-output name=API_HEALTH_CHECK_PATH::"
            echo "::set-output name=WEB_HEALTH_CHECK_PATH::"
            echo "::set-output name=APP_CLIENT_ID::"
            echo "::set-output name=STAGING_APP_CLIENT_ID::"
          else
            echo "::set-output name=FIRST_DEPLOYMENT::false"
            healthCheckPath=`az webapp show -g ${{secrets.AZURE_RESOURCE_GROUP}} -n "${{secrets.AZURE_API_APP_NAME}}" --query "siteConfig.healthCheckPath" -o tsv`
            echo "::set-output name=API_HEALTH_CHECK_PATH::${healthCheckPath}"
            healthCheckPath=`az webapp show -g ${{secrets.AZURE_RESOURCE_GROUP}} -n "${{secrets.AZURE_WEB_APP_NAME}}" --query "siteConfig.healthCheckPath" -o tsv`
            echo "::set-output name=WEB_HEALTH_CHECK_PATH::${healthCheckPath}"
            appClientId=`az ad sp list --display-name "${{secrets.AZURE_API_APP_NAME}}" --query "[?displayName=='${{secrets.AZURE_API_APP_NAME}}'].appId" --out tsv`
            echo "::set-output name=APP_CLIENT_ID::${appClientId}"
            stagingAppClientId=`az ad sp list --display-name "${{secrets.AZURE_API_APP_NAME}}/slots/staging" --query "[?displayName=='${{secrets.AZURE_API_APP_NAME}}/slots/staging'].appId" --out tsv`
            echo "::set-output name=STAGING_APP_CLIENT_ID::${stagingAppClientId}"
          fi
      
      - name: Deploy Azure resources (AAD Integration)
        id: deployment_aad_mi
        if: steps.input_vars.outputs.DEPLOYMENT_ENVIRONMENT == 'MANAGED_IDENTITIES'
        run: |
          echo "Deploying with the following parameters:"
          echo "API App service name: '${{secrets.AZURE_API_APP_NAME}}'"
          echo "API App port: '${{secrets.AZURE_API_APP_PORT}}'"
          echo "WEB App service name: '${{secrets.AZURE_WEB_APP_NAME}}'"
          echo "WEB App port: '${{secrets.AZURE_WEB_APP_PORT}}'"

          az deployment group create --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} --template-file ./templates/app-service-mi.bicep \
                        --parameters location=${{secrets.AZURE_LOCATION}}  \
                                      logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}  \
                                      logAnalyticsWorkspaceRG=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} \
                                      keyVaultName=${{secrets.AZURE_KEY_VAULT_NAME}}  \
                                      appInsightsName=${{secrets.AZURE_APP_INSIGHTS_NAME}}  \
                                      dbServerName=${{secrets.AZURE_DB_SERVER_NAME}} \
                                      dbName=${{secrets.AZURE_DB_NAME}} \
                                      dbAdminName=${{steps.vars.outputs.DB_ADMIN_NAME}} \
                                      dbAdminPassword=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} \
                                      dbUserName=${{steps.vars.outputs.DB_APP_USER_NAME}} \
                                      dbStagingUserName=${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}} \
                                      appClientId="${{steps.vars.outputs.APP_CLIENT_ID}}" \
                                      stagingAppClientId="${{steps.vars.outputs.STAGING_APP_CLIENT_ID}}" \
                                      apiAppServiceName=${{secrets.AZURE_API_APP_NAME}} \
                                      apiAppServicePort=${{secrets.AZURE_API_APP_PORT}} \
                                      webAppServiceName=${{secrets.AZURE_WEB_APP_NAME}} \
                                      webAppServicePort=${{secrets.AZURE_WEB_APP_PORT}} \
                                      deploymentClientIPAddress=${{steps.vars.outputs.DEPLOYMENT_CLIENT_IP}} \
                                      apiHealthCheckPath="${{steps.vars.outputs.API_HEALTH_CHECK_PATH}}" \
                                      webHealthCheckPath="${{steps.vars.outputs.WEB_HEALTH_CHECK_PATH}}"
      
      - name: Deploy Azure resources (AAD Integration + VNET)
        id: deployment_aad_mi_vnet
        if: steps.input_vars.outputs.DEPLOYMENT_ENVIRONMENT == 'VNET'
        run: |
          echo "Deploying with the following parameters:"
          echo "API App service name: '${{secrets.AZURE_API_APP_NAME}}'"
          echo "API App port: '${{secrets.AZURE_API_APP_PORT}}'"
          echo "WEB App service name: '${{secrets.AZURE_WEB_APP_NAME}}'"
          echo "WEB App port: '${{secrets.AZURE_WEB_APP_PORT}}'"
          
          az deployment group create --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} --template-file ./templates/app-service-mi-vnet.bicep \
                        --parameters location=${{secrets.AZURE_LOCATION}}  \
                                      logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}  \
                                      logAnalyticsWorkspaceRG=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} \
                                      keyVaultName=${{secrets.AZURE_KEY_VAULT_NAME}}  \
                                      appInsightsName=${{secrets.AZURE_APP_INSIGHTS_NAME}}  \
                                      dbServerName=${{secrets.AZURE_DB_SERVER_NAME}} \
                                      dbName=${{secrets.AZURE_DB_NAME}} \
                                      dbAdminName=${{steps.vars.outputs.DB_ADMIN_NAME}} \
                                      dbAdminPassword=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} \
                                      dbUserName=${{steps.vars.outputs.DB_APP_USER_NAME}} \
                                      dbStagingUserName=${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}} \
                                      appClientId="${{steps.vars.outputs.APP_CLIENT_ID}}" \
                                      stagingAppClientId="${{steps.vars.outputs.STAGING_APP_CLIENT_ID}}" \
                                      apiAppServiceName=${{secrets.AZURE_API_APP_NAME}} \
                                      apiAppServicePort=${{secrets.AZURE_API_APP_PORT}} \
                                      webAppServiceName=${{secrets.AZURE_WEB_APP_NAME}} \
                                      webAppServicePort=${{secrets.AZURE_WEB_APP_PORT}} \
                                      deploymentClientIPAddress=${{steps.vars.outputs.DEPLOYMENT_CLIENT_IP}} \
                                      apiHealthCheckPath="${{steps.vars.outputs.API_HEALTH_CHECK_PATH}}" \
                                      webHealthCheckPath="${{steps.vars.outputs.WEB_HEALTH_CHECK_PATH}}"
      
      - name: Init AAD ClientId
        id: deployment_aad
        if: steps.vars.outputs.DB_AAD_INTEGRATION == 'true'
        run: |
          dbAppUserId=`az ad sp list --display-name "${{secrets.AZURE_API_APP_NAME}}" --query "[?displayName=='${{secrets.AZURE_API_APP_NAME}}'].appId" --out tsv`
          echo "::set-output name=DB_APP_USER_ID::${dbAppUserId}"

          dbStagingAppUserId=`az ad sp list --display-name "${{secrets.AZURE_API_APP_NAME}}/slots/staging" --query "[?displayName=='${{secrets.AZURE_API_APP_NAME}}/slots/staging'].appId" --out tsv`
          echo "::set-output name=DB_STAGING_APP_USER_ID::${dbStagingAppUserId}"

          #Following is a workaround - I still did not figure out how to retrieve AppId in bicep
          az keyvault secret set --vault-name "${{secrets.AZURE_KEY_VAULT_NAME}}" --name "SPRING-DATASOURCE-APP-CLIENT-ID" --value "${dbAppUserId}"
          az keyvault secret set --vault-name "${{secrets.AZURE_KEY_VAULT_NAME}}" --name "SPRING-DATASOURCE-APP-CLIENT-ID-STAGING" --value "${dbStagingAppUserId}"

      - name: Deploy Azure resources (NO AAD Integration)
        id: deployment_no_aad
        if: steps.input_vars.outputs.DEPLOYMENT_ENVIRONMENT == 'CLASSIC'
        run: |
          echo "Deploying with the following parameters:"
          echo "API App service name: '${{secrets.AZURE_API_APP_NAME}}'"
          echo "API App port: '${{secrets.AZURE_API_APP_PORT}}'"
          echo "WEB App service name: '${{secrets.AZURE_WEB_APP_NAME}}'"
          echo "WEB App port: '${{secrets.AZURE_WEB_APP_PORT}}'"

          az deployment group create --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} --template-file ./templates/app-service-classic.bicep \
                        --parameters location=${{secrets.AZURE_LOCATION}}  \
                                     logAnalyticsWorkspaceName=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_NAME}}  \
                                     logAnalyticsWorkspaceRG=${{secrets.AZURE_LOG_ANALYTICS_WRKSPC_RESOURCE_GROUP}} \
                                     keyVaultName=${{secrets.AZURE_KEY_VAULT_NAME}}  \
                                     appInsightsName=${{secrets.AZURE_APP_INSIGHTS_NAME}}  \
                                     dbServerName=${{secrets.AZURE_DB_SERVER_NAME}} \
                                     dbName=${{secrets.AZURE_DB_NAME}} \
                                     dbAdminName=${{steps.vars.outputs.DB_ADMIN_NAME}} \
                                     dbAdminPassword=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} \
                                     dbUserName=${{steps.vars.outputs.DB_APP_USER_NAME}} \
                                     dbUserPassword=${{steps.vars.outputs.DB_APP_USER_PASSWORD}}\
                                     dbStagingUserName=${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}} \
                                     dbStagingUserPassword=${{steps.vars.outputs.DB_STAGING_APP_USER_PASSWORD}}\
                                     apiAppServiceName=${{secrets.AZURE_API_APP_NAME}} \
                                     apiAppServicePort=${{secrets.AZURE_API_APP_PORT}} \
                                     webAppServiceName=${{secrets.AZURE_WEB_APP_NAME}} \
                                     webAppServicePort=${{secrets.AZURE_WEB_APP_PORT}} \
                                     deploymentClientIPAddress=${{steps.vars.outputs.DEPLOYMENT_CLIENT_IP}} \
                                     apiHealthCheckPath="${{steps.vars.outputs.API_HEALTH_CHECK_PATH}}" \
                                     webHealthCheckPath="${{steps.vars.outputs.WEB_HEALTH_CHECK_PATH}}"

      - name: Set-up DB AAD Integration
        if: (steps.vars.outputs.DB_AAD_INTEGRATION == 'true')
        run: |
          dbPrincipalName=`az postgres flexible-server ad-admin list -g ${{secrets.AZURE_RESOURCE_GROUP}} -s ${{secrets.AZURE_DB_SERVER_NAME}} --query "[?principalName == '${{secrets.AZURE_DBA_GROUP_NAME}}'].principalName" -o tsv`
          if [[ -z "$dbPrincipalName" ]]; then
            echo "Setting AAD DB Admin Group"
            az postgres flexible-server ad-admin create -s ${{secrets.AZURE_DB_SERVER_NAME}} -g ${{secrets.AZURE_RESOURCE_GROUP}} --object-id ${{steps.vars.outputs.AZURE_DBA_GROUP_ID}} --display-name "${{secrets.AZURE_DBA_GROUP_NAME}}" -t Group
          fi
      - name: Synchronize DB Schema (NON AAD version)
        run: |
          dbConnectionString="host=${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com port=5432 dbname=${{secrets.AZURE_DB_NAME}} user=${{steps.vars.outputs.DB_ADMIN_NAME}} password=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} sslmode=require"
          psql "${dbConnectionString}" --file=./db.sql
        
      - name: If not AAD, set-up traditional DB User(s)
        if: steps.vars.outputs.DB_AAD_INTEGRATION == 'false'
        run: |
          dbConnectionString="host=${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com port=5432 dbname=${{secrets.AZURE_DB_NAME}} user=${{steps.vars.outputs.DB_ADMIN_NAME}} password=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} sslmode=require"
          
          dbUserExists=`psql "${dbConnectionString}" -tAc "SELECT 1 FROM pg_roles WHERE rolname='${{steps.vars.outputs.DB_APP_USER_NAME}}';"`
          if [[ $dbUserExists -ne '1' ]]; then
            echo "CREATE USER ${{steps.vars.outputs.DB_APP_USER_NAME}} WITH PASSWORD '${{steps.vars.outputs.DB_APP_USER_PASSWORD}}';" > ./create_user.sql
          else
            echo "ALTER USER ${{steps.vars.outputs.DB_APP_USER_NAME}} WITH PASSWORD '${{steps.vars.outputs.DB_APP_USER_PASSWORD}}';" > ./create_user.sql
          fi
          echo "GRANT CONNECT ON DATABASE ${{secrets.AZURE_DB_NAME}} TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql
          echo "GRANT USAGE ON SCHEMA public TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql
          echo "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./create_user.sql

          echo "User ${{steps.vars.outputs.DB_ADMIN_NAME}} is running a user creation script:"
          cat ./create_user.sql

          psql "${dbConnectionString}" --file=./create_user.sql

          echo "List of existing users:"
          psql "${dbConnectionString}" -tAc "SELECT * FROM pg_roles;"

      - name: If not AAD, set-up traditional Staging DB User(s)
        if: steps.vars.outputs.DB_AAD_INTEGRATION == 'false'
        run: |
          dbConnectionString="host=${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com port=5432 dbname=${{secrets.AZURE_DB_NAME}} user=${{steps.vars.outputs.DB_ADMIN_NAME}} password=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} sslmode=require"
          
          dbUserExists=`psql "${dbConnectionString}" -tAc "SELECT 1 FROM pg_roles WHERE rolname='${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}}';"`
          if [[ $dbUserExists -ne '1' ]]; then
            echo "CREATE USER ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}} WITH PASSWORD '${{steps.vars.outputs.DB_STAGING_APP_USER_PASSWORD}}';" > ./create_user.sql
          else
            echo "ALTER USER ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}} WITH PASSWORD '${{steps.vars.outputs.DB_STAGING_APP_USER_PASSWORD}}';" > ./create_user.sql
          fi
          echo "GRANT CONNECT ON DATABASE ${{secrets.AZURE_DB_NAME}} TO ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}};">> ./create_user.sql
          echo "GRANT USAGE ON SCHEMA public TO ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}};">> ./create_user.sql
          echo "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}};">> ./create_user.sql

          echo "User ${{steps.vars.outputs.DB_ADMIN_NAME}} is running a user creation script:"
          cat ./create_user.sql

          psql "${dbConnectionString}" --file=./create_user.sql

          echo "List of existing users:"
          psql "${dbConnectionString}" -tAc "SELECT * FROM pg_roles;"
      
      - name: If AAD, set-up AAD DB User(s)
        if: steps.vars.outputs.DB_AAD_INTEGRATION == 'true'
        run: |
          export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`

          echo "create role ${{steps.vars.outputs.DB_APP_USER_NAME}} login;" > ./create_role.sql
          echo "User group ${{secrets.AZURE_DB_SERVER_NAME}} is running AAD role creation script:"
          cat ./create_role.sql
          psql --set=sslmode=require -h ${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com -p 5432 -d ${{secrets.AZURE_DB_NAME}} -U "${{secrets.AZURE_DBA_GROUP_NAME}}" --file=./create_role.sql

          echo "security label for pgaadauth " > ./security_label.sql
          echo "    on role ${{steps.vars.outputs.DB_APP_USER_NAME}} " >> ./security_label.sql
          echo "    is 'aadauth,oid=${{steps.deployment_aad.outputs.DB_APP_USER_ID}},type=service'; " >> ./security_label.sql
          echo "User group ${{secrets.AZURE_DB_SERVER_NAME}} is running security label assignment script:"
          cat ./security_label.sql
          psql --set=sslmode=require -h ${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com -p 5432 -d ${{secrets.AZURE_DB_NAME}} -U "${{secrets.AZURE_DBA_GROUP_NAME}}" --file=./security_label.sql

          echo "GRANT CONNECT ON DATABASE ${{secrets.AZURE_DB_NAME}} TO ${{steps.vars.outputs.DB_APP_USER_NAME}};"> ./grant_rights.sql
          echo "GRANT USAGE ON SCHEMA public TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./grant_rights.sql
          echo "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${{steps.vars.outputs.DB_APP_USER_NAME}};">> ./grant_rights.sql
          echo "User group ${{secrets.AZURE_DB_SERVER_NAME}} is running a script to GRANT permissions:"
          cat ./grant_rights.sql
          dbConnectionString="host=${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com port=5432 dbname=${{secrets.AZURE_DB_NAME}} user=${{steps.vars.outputs.DB_ADMIN_NAME}} password=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} sslmode=require"
          psql "${dbConnectionString}" --file=./grant_rights.sql

          echo "List of existing users:"
          psql --set=sslmode=require -h ${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com -p 5432 -d ${{secrets.AZURE_DB_NAME}} -U "${{secrets.AZURE_DBA_GROUP_NAME}}" -tAc "SELECT * FROM pg_roles;"

      - name: If AAD, set-up STAGING AAD DB User(s)
        if: steps.vars.outputs.DB_AAD_INTEGRATION == 'true'
        run: |
          export PGPASSWORD=`az account get-access-token --resource-type oss-rdbms --query "[accessToken]" --output tsv`

          echo "create role ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}} login;" > ./create_role.sql
          echo "User group ${{secrets.AZURE_DB_SERVER_NAME}} is running AAD role creation script:"
          cat ./create_role.sql
          psql --set=sslmode=require -h ${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com -p 5432 -d ${{secrets.AZURE_DB_NAME}} -U "${{secrets.AZURE_DBA_GROUP_NAME}}" --file=./create_role.sql

          echo "security label for pgaadauth " > ./security_label.sql
          echo "    on role ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}} " >> ./security_label.sql
          echo "    is 'aadauth,oid=${{steps.deployment_aad.outputs.DB_STAGING_APP_USER_ID}},type=service'; " >> ./security_label.sql
          echo "User group ${{secrets.AZURE_DB_SERVER_NAME}} is running security label assignment script:"
          cat ./security_label.sql
          psql --set=sslmode=require -h ${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com -p 5432 -d ${{secrets.AZURE_DB_NAME}} -U "${{secrets.AZURE_DBA_GROUP_NAME}}" --file=./security_label.sql

          echo "GRANT CONNECT ON DATABASE ${{secrets.AZURE_DB_NAME}} TO ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}};"> ./grant_rights.sql
          echo "GRANT USAGE ON SCHEMA public TO ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}};">> ./grant_rights.sql
          echo "GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${{steps.vars.outputs.DB_STAGING_APP_USER_NAME}};">> ./grant_rights.sql
          echo "User group ${{secrets.AZURE_DB_SERVER_NAME}} is running a script to GRANT permissions:"
          cat ./grant_rights.sql
          dbConnectionString="host=${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com port=5432 dbname=${{secrets.AZURE_DB_NAME}} user=${{steps.vars.outputs.DB_ADMIN_NAME}} password=${{steps.vars.outputs.DB_ADMIN_PASSWORD}} sslmode=require"
          psql "${dbConnectionString}" --file=./grant_rights.sql
          
          echo "List of existing users:"
          psql --set=sslmode=require -h ${{secrets.AZURE_DB_SERVER_NAME}}.postgres.database.azure.com -p 5432 -d ${{secrets.AZURE_DB_NAME}} -U "${{secrets.AZURE_DBA_GROUP_NAME}}" -tAc "SELECT * FROM pg_roles;"

      - name: Remove DB Firewall exception used for Schema sync
        run: |
          az postgres flexible-server firewall-rule delete --rule-name "AllowDeploymentClientIP" --resource-group ${{secrets.AZURE_RESOURCE_GROUP}} --name ${{secrets.AZURE_DB_SERVER_NAME}} --yes